# Cursor用設定ファイル
# AI開発者がコード変更時に必ず参照すべきファイル

## 🚨 重要：コード変更前の必須チェック

**以下のファイルを必ず参照してからコード変更を行ってください：**

1. **技術仕様書**: `技術仕様書_関数・ファイルパス一覧.md`
   - 現在の関数・クラス・ファイルパスの完全な一覧
   - 変更時の影響範囲を確認

2. **AI参照ガイド**: `AI_REFERENCE_GUIDE.md`
   - コード変更時の手順と注意事項
   - よくある間違いと回避方法
   - 重複関数定義防止ルール
   - 変数スコープチェックルール

3. **進捗管理**: `ToDoリスト.md`
   - 現在の進捗と優先タスク
   - 完了した作業の記録

## 🛡️ 自動化チェック・不具合防止システム

プロジェクトには以下の包括的な自動化システムが組み込まれています：

### 自動チェックツール
- **重複関数定義チェック**: `scripts/check_duplicate_functions.py`
- **仕様書整合性チェック**: `scripts/check_spec_compliance.py`
- **包括的品質チェック**: `check_spec.bat` (5段階チェック)
- **Git pre-commitフック**: コミット前に自動チェック
- **GitHub Actions**: CI/CD自動チェック

### 品質保証チェック
1. **重複関数定義チェック**: トップレベル関数の重複定義を検出
2. **仕様書整合性チェック**: 関数名・ファイルパス・インポート文の整合性
3. **型チェック**: mypyによる型安全性の確保
4. **テスト実行**: pytestによる動作確認
5. **構文チェック**: Python構文エラーの検出

## ⚠️ 重要な注意事項・防止策

### 1. 重複関数定義の防止（最重要）
- ❌ **禁止**: 同じファイル内で同名関数を複数定義
- ✅ **必須**: 関数追加前に重複チェックを実行
- ✅ **必須**: `python scripts/check_duplicate_functions.py modules` を実行

### 2. 変数スコープの管理
- ❌ **禁止**: 未定義変数の使用（`for tag in tags:` で `tags` が未定義）
- ✅ **必須**: 変数使用前に定義確認
- ✅ **必須**: 関数内変数の適切なスコープ管理

### 3. ファイルパス・インポート管理
- ❌ **禁止**: 相対パスの使用
- ✅ **必須**: 絶対パスを使用
- ✅ **必須**: インポート文の整合性確認

### 4. 関数・クラス管理
- ❌ **禁止**: 技術仕様書に記載されていない関数名の変更
- ✅ **必須**: 既存クラス構造の維持
- ✅ **必須**: 重要な変更時の技術仕様書更新

### 5. エラー処理・例外管理
- ✅ **必須**: 適切なtry-except文の使用
- ✅ **必須**: エラーメッセージの明確化
- ✅ **必須**: ログ出力による追跡可能性の確保

## 🔧 開発環境・ツール

### 必須ツール
- Python 3.8+
- ttkbootstrap
- SQLite3
- mypy (型チェック)
- pytest (テスト)

### 自動チェックツール
- `scripts/check_duplicate_functions.py` - 重複関数定義検出
- `scripts/check_spec_compliance.py` - 仕様書整合性チェック
- `check_spec.bat` - 包括的品質チェック
- `scripts/auto_backup.py` - 自動バックアップ
- `scripts/performance_monitor.py` - パフォーマンス監視

## 📝 コード変更手順（強化版）

### Step 1: 事前チェック
1. `check_spec.bat` を実行して現在の状態を確認
2. 技術仕様書で現在の実装を確認
3. 変更内容の影響範囲を分析
4. 重複関数定義の有無を確認

### Step 2: 変更実行
1. コード変更を実行
2. 変数定義の確認
3. インポート文の確認
4. エラー処理の追加

### Step 3: 品質確認
1. `python scripts/check_duplicate_functions.py modules` で重複チェック
2. `pytest` でテスト実行
3. `mypy` で型チェック
4. 構文チェックの実行

### Step 4: ドキュメント更新
1. 技術仕様書の更新（必要に応じて）
2. ToDoリストの更新
3. 変更内容の記録

## 🚀 推奨ワークフロー（強化版）

### 日常的な開発フロー
1. `check_spec.bat` で現在の状態を確認
2. 変更を実装（重複関数定義に注意）
3. 変数定義・スコープを確認
4. エラー処理を追加
5. 自動チェックを実行
6. テスト・型チェックを実行
7. ドキュメントを更新

### 緊急時・デバッグ時
1. `python scripts/check_duplicate_functions.py modules` で重複チェック
2. エラーログの確認
3. 変数スコープの確認
4. インポート文の確認
5. 段階的な修正とテスト

## 🔍 品質保証チェックリスト

### 関数定義前チェック
- [ ] 同じファイル内に同名関数が存在しないか確認
- [ ] 関数内で使用する変数が全て定義されているか確認
- [ ] インポート文が正しく記述されているか確認
- [ ] 関数の引数と戻り値の型が明確か確認

### 変更後チェック
- [ ] 重複関数定義チェックを実行
- [ ] 仕様書整合性チェックを実行
- [ ] 型チェックを実行
- [ ] テストを実行
- [ ] 構文チェックを実行

### ドキュメント更新チェック
- [ ] 技術仕様書の更新が必要か確認
- [ ] ToDoリストの更新
- [ ] 変更内容の記録

## 🚨 緊急時の対処法

### 重複関数定義エラー
1. `python scripts/check_duplicate_functions.py modules` で詳細確認
2. 重複した関数定義の削除
3. 正しい関数定義のみを残す
4. 再度チェックを実行

### 未定義変数エラー
1. 変数定義箇所の確認
2. スコープの確認
3. 適切な場所での変数定義
4. エラー処理の追加

### インポートエラー
1. インポート文の確認
2. ファイルパスの確認
3. 依存関係の確認
4. 循環インポートの回避

## 📊 品質メトリクス

### 自動チェック結果
- 重複関数定義: 0件（目標）
- 型チェックエラー: 最小化
- テスト成功率: 90%以上
- カバレッジ: 70%以上

### 継続的改善
- 月次品質レビュー
- 自動チェックツールの改善
- ドキュメントの更新
- ベストプラクティスの共有

---

**このガイドラインに従わない変更は、予期しないバグや不具合を引き起こす可能性があります。必ず参照してください。** 