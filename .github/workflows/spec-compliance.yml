name: 技術仕様書整合性チェック

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

jobs:
  spec-compliance:
    runs-on: ubuntu-latest
    
    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v3
      
    - name: Python環境をセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 技術仕様書整合性チェック
      run: |
        echo "🔍 技術仕様書との整合性をチェック中..."
        
        # 必須ファイルの存在確認
        required_files=(
          "技術仕様書_関数・ファイルパス一覧.md"
          "AI_REFERENCE_GUIDE.md"
          "ToDoリスト.md"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "❌ 以下の必須ファイルが見つかりません:"
          printf '  - %s\n' "${missing_files[@]}"
          exit 1
        fi
        
        echo "✅ 必須ファイルの存在確認完了"
        
        # 重要なモジュールファイルの確認
        important_modules=(
          "modules/ui_main.py"
          "modules/tag_manager.py"
          "modules/dialogs.py"
          "modules/theme_manager.py"
          "modules/constants.py"
        )
        
        missing_modules=()
        for module in "${important_modules[@]}"; do
          if [ ! -f "$module" ]; then
            missing_modules+=("$module")
          fi
        done
        
        if [ ${#missing_modules[@]} -ne 0 ]; then
          echo "❌ 以下の重要なモジュールファイルが見つかりません:"
          printf '  - %s\n' "${missing_modules[@]}"
          exit 1
        fi
        
        echo "✅ 重要なモジュールファイルの確認完了"
        
        # 相対パスの使用チェック
        echo "🔍 絶対パスの使用確認中..."
        
        relative_path_issues=()
        for module in "${important_modules[@]}"; do
          if grep -q "'resources/tags\.db'" "$module" 2>/dev/null; then
            relative_path_issues+=("$module: 相対パス 'resources/tags.db' が使用されています")
          fi
          if grep -q "'resources/" "$module" 2>/dev/null; then
            relative_path_issues+=("$module: 相対パス 'resources/' が使用されています")
          fi
        done
        
        if [ ${#relative_path_issues[@]} -ne 0 ]; then
          echo "⚠️  相対パスの使用が検出されました:"
          printf '  - %s\n' "${relative_path_issues[@]}"
          echo "絶対パスの使用を推奨します"
        fi
        
        echo "✅ パス使用確認完了"
        
        # 技術仕様書に関数・クラスが記載されているかチェック
        echo "📝 技術仕様書との整合性確認中..."
        
        # Pythonファイルから関数・クラスを抽出して技術仕様書に記載されているかチェック
        python scripts/check_spec_compliance.py

        echo "🎉 すべてのチェックが完了しました！"
        
    - name: チェック結果の通知
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ 技術仕様書との整合性チェックが成功しました"
        else
          echo "❌ 技術仕様書との整合性チェックで問題が見つかりました"
          echo "技術仕様書とAI_REFERENCE_GUIDE.mdを確認してください"
        fi 